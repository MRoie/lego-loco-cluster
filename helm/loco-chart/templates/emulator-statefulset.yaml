apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "loco.fullname" . }}-emulator
  namespace: {{ include "loco.namespace" . }}
spec:
  serviceName: {{ include "loco.fullname" . }}-emulator
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ include "loco.fullname" . }}-emulator
      app.kubernetes.io/component: emulator
      app.kubernetes.io/part-of: lego-loco-cluster
  template:
    metadata:
      labels:
        app: {{ include "loco.fullname" . }}-emulator
        app.kubernetes.io/component: emulator
        app.kubernetes.io/part-of: lego-loco-cluster
        app.kubernetes.io/name: lego-loco-emulator
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      
      # Init containers for storage and disk image initialization
      initContainers:
      {{- if .Values.storage.strategy.hostPath.enabled }}
      - name: init-hostpath-storage
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          # Create shared directory with proper permissions
          mkdir -p {{ .Values.storage.strategy.hostPath.path }}
          chmod {{ .Values.storage.strategy.hostPath.permissions }} {{ .Values.storage.strategy.hostPath.path }}
          
          # Create art subdirectory
          mkdir -p {{ .Values.storage.strategy.hostPath.path }}/art
          chmod {{ .Values.storage.strategy.hostPath.permissions }} {{ .Values.storage.strategy.hostPath.path }}/art
          
          echo "HostPath storage initialized successfully"
          echo "Path: {{ .Values.storage.strategy.hostPath.path }}"
          ls -la {{ .Values.storage.strategy.hostPath.path }}
        volumeMounts:
          - name: hostpath-storage
            mountPath: {{ .Values.storage.strategy.hostPath.path }}
      {{- end }}
      
      # Init container for disk image population
      {{- if .Values.emulator.diskPVC }}
      - name: init-disk-image
        image: {{ include "loco.image" (dict "root" . "image" .Values.emulator.image "tag" .Values.emulator.tag) }}
        imagePullPolicy: {{ .Values.emulator.imagePullPolicy }}
        command: ['sh', '-c']
        args:
        - |
          echo "Initializing disk image in PVC..."
          
          # Check if disk image already exists in PVC
          if [ -f /images/win98.qcow2 ]; then
            echo "‚úÖ Disk image already exists in PVC"
            ls -lh /images/win98.qcow2
            exit 0
          fi
          
          # Check if built-in disk image exists
          if [ -f /opt/builtin-images/win98.qcow2.builtin ]; then
            echo "üìã Copying built-in disk image to PVC..."
            cp /opt/builtin-images/win98.qcow2.builtin /images/win98.qcow2
            echo "‚úÖ Disk image copied to PVC successfully"
            ls -lh /images/win98.qcow2
          else
            echo "‚ùå Built-in disk image not found"
            echo "Available files in /opt/builtin-images:"
            ls -la /opt/builtin-images/
            exit 1
          fi
        volumeMounts:
          - name: disk
            mountPath: /images
            readOnly: false
      {{- end }}
      
      containers:
      - name: emulator
        image: {{ include "loco.image" (dict "root" . "image" .Values.emulator.image "tag" .Values.emulator.tag) }}
        imagePullPolicy: {{ .Values.emulator.imagePullPolicy }}
        env:
        {{- if .Values.emulator.env }}
        {{- range $key, $value := .Values.emulator.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.emulator.usePrebuiltSnapshot }}
        - name: USE_PREBUILT_SNAPSHOT
          value: "true"
        - name: SNAPSHOT_REGISTRY
          value: {{ .Values.emulator.snapshotRegistry | quote }}
        - name: SNAPSHOT_TAG
          value: {{ .Values.emulator.snapshotTag | quote }}
        {{- end }}
        - name: ART_RES_ROOT
          value: "/nfs"
        - name: GIT_USER_NAME
          value: {{ .Values.git.userName | quote }}
        - name: GIT_USER_EMAIL
          value: {{ .Values.git.userEmail | quote }}
        securityContext:
          privileged: true
          capabilities:
            add:
              - NET_ADMIN
              - SYS_ADMIN
        ports:
        - containerPort: {{ .Values.emulator.servicePort }}
        - containerPort: 8080
          name: health
        volumeMounts:
        - name: disk
          mountPath: /images
          readOnly: {{ .Values.emulator.diskReadOnly }}
        - name: dev-net-tun
          mountPath: /dev/net/tun
        
        {{- if .Values.storage.strategy.hostPath.enabled }}
        # Option 1: HostPath Direct Mounts
        - name: hostpath-storage
          mountPath: /nfs
        {{- else if .Values.storage.strategy.hybrid.enabled }}
        # Option 8: Hybrid Storage Strategy
        {{- if eq .Values.storage.strategy.hybrid.primary "hostPath" }}
        - name: hostpath-storage
          mountPath: /nfs
        {{- else if eq .Values.storage.strategy.hybrid.primary "emptyDir" }}
        - name: emptydir-storage
          mountPath: /nfs
        {{- else if eq .Values.storage.strategy.hybrid.primary "configMap" }}
        - name: configmap-storage
          mountPath: /nfs
        {{- else }}
        # Default to NFS
        - name: art-res-nfs
          mountPath: /nfs
        {{- end }}
        {{- else }}
        # Default NFS mount
        - name: art-res-nfs
          mountPath: /nfs
        {{- end }}
        
        resources:
          {{- if .Values.emulator.resources }}
          {{- toYaml .Values.emulator.resources | nindent 10 }}
          {{- end }}
      volumes:
      - name: disk
        {{- if .Values.emulator.diskPVC }}
        persistentVolumeClaim:
          claimName: {{ .Values.emulator.diskPVC }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: dev-net-tun
        hostPath:
          path: /dev/net/tun
          type: CharDevice
      
      {{- if .Values.storage.strategy.hostPath.enabled }}
      # Option 1: HostPath Direct Mounts
      - name: hostpath-storage
        hostPath:
          path: {{ .Values.storage.strategy.hostPath.path }}
          type: DirectoryOrCreate
      {{- else if .Values.storage.strategy.hybrid.enabled }}
      # Option 8: Hybrid Storage Strategy
      {{- if eq .Values.storage.strategy.hybrid.primary "hostPath" }}
      - name: hostpath-storage
        hostPath:
          path: {{ .Values.storage.strategy.hostPath.path | default "/tmp/loco-art-shared" }}
          type: DirectoryOrCreate
      {{- else if eq .Values.storage.strategy.hybrid.primary "emptyDir" }}
      - name: emptydir-storage
        emptyDir:
          {{- if .Values.storage.strategy.hybrid.emptyDir.medium }}
          medium: {{ .Values.storage.strategy.hybrid.emptyDir.medium }}
          {{- end }}
          {{- if .Values.storage.strategy.hybrid.emptyDir.sizeLimit }}
          sizeLimit: {{ .Values.storage.strategy.hybrid.emptyDir.sizeLimit }}
          {{- end }}
      {{- else if eq .Values.storage.strategy.hybrid.primary "configMap" }}
      - name: configmap-storage
        configMap:
          name: {{ .Values.storage.strategy.hybrid.configMap.name }}
      {{- else }}
      # Default to NFS
      - name: art-res-nfs
        nfs:
          server: {{ .Values.artRes.nfs.server }}
          path: {{ .Values.artRes.nfs.path }}
      {{- end }}
      {{- else }}
      # Default NFS volume
      - name: art-res-nfs
        nfs:
          server: {{ .Values.artRes.nfs.server }}
          path: {{ .Values.artRes.nfs.path }}
      {{- end }}

name: CI

on:
  push:
    branches: [ "run_ci", "copilot/fix-55" ]
  pull_request:
    branches: [ "run_ci", "copilot/fix-55" ]

# Global environment variables
env:
  CI_BASE_IMAGE: "ghcr.io/${{ github.repository }}/lego-loco-cluster-ci:latest"
  CI_FALLBACK_IMAGE: "node:20-bullseye"
  REGISTRY: ghcr.io
  IMAGE_NAME: lego-loco-cluster-ci

jobs:
  # Check if CI base image is available, build if needed
  prepare-ci-image:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      ci-image: ${{ steps.check-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if CI image exists
        id: check-image
        run: |
          CI_IMAGE="${{ env.CI_BASE_IMAGE }}"
          FALLBACK_IMAGE="${{ env.CI_FALLBACK_IMAGE }}"
          
          # Try to pull the CI image
          if docker pull "$CI_IMAGE" 2>/dev/null; then
            echo "CI image available: $CI_IMAGE"
            echo "image=$CI_IMAGE" >> $GITHUB_OUTPUT
          else
            echo "CI image not available, using fallback: $FALLBACK_IMAGE"
            echo "image=$FALLBACK_IMAGE" >> $GITHUB_OUTPUT
          fi
      - name: Build CI image if needed
        if: steps.check-image.outputs.image == env.CI_FALLBACK_IMAGE
        run: |
          echo "Building CI image since it's not available..."
          docker build -f .github/Dockerfile.ci -t "${{ env.CI_BASE_IMAGE }}" .
          echo "CI image built successfully"

  # Build the backend and frontend assets
  build:
    needs: prepare-ci-image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    container:
      image: ${{ needs.prepare-ci-image.outputs.ci-image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install system packages (fallback only)
        if: needs.prepare-ci-image.outputs.ci-image == env.CI_FALLBACK_IMAGE
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "Using fallback image, installing basic packages..."
          apt-get update && apt-get install -y --no-install-recommends curl jq
      - name: Install Node dependencies and build frontend
        run: |
          # Backend packages
          cd backend && npm install && cd ..
          # Frontend packages and production build
          cd frontend && npm install && npm run build && cd ..

  # Sequential cluster-based integration tests to resolve concurrency issues
  cluster-integration:
    needs: [build, prepare-ci-image]
    runs-on: ubuntu-22.04
    timeout-minutes: 30  # Extended timeout for sequential tests
    container:
      image: ${{ needs.prepare-ci-image.outputs.ci-image }}
      options: --privileged
    strategy:
      # Run tests sequentially to avoid minikube concurrency issues
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install system packages (fallback only)
        if: needs.prepare-ci-image.outputs.ci-image == env.CI_FALLBACK_IMAGE
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "Using fallback image, installing required packages..."
          apt-get update
          apt-get install -y --no-install-recommends \
            qemu-system-x86 qemu-kvm wine gstreamer1.0-tools \
            pulseaudio docker.io tcpdump netcat-openbsd curl jq \
            ca-certificates apt-transport-https lsb-release gnupg conntrack
      - name: Install kubectl and helm (fallback only)
        if: needs.prepare-ci-image.outputs.ci-image == env.CI_FALLBACK_IMAGE
        run: |
          curl -LO "https://dl.k8s.io/release/v1.28.3/bin/linux/amd64/kubectl"
          install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          curl https://get.helm.sh/helm-v3.15.4-linux-amd64.tar.gz | tar -xzO linux-amd64/helm > /usr/local/bin/helm
          chmod +x /usr/local/bin/helm
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          install -o root -g root -m 0755 minikube /usr/local/bin/minikube
      - name: Verify pre-installed tools
        run: |
          echo "Verifying CI tools..."
          kubectl version --client=true
          helm version --short
          minikube version --short
          docker --version
          echo "All tools verified successfully"
      - name: Start Docker daemon
        run: scripts/start_docker_daemon.sh
      - name: Install Node dependencies
        run: |
          cd backend && npm install && cd ..
          cd frontend && npm install && npm run build && cd ..
      - name: Create Minikube cluster (shared for all tests)
        run: scripts/manage_ci_cluster.sh create
      - name: Run network tests
        run: |
          echo "=== Running Network Integration Tests ==="
          bash k8s-tests/test-network.sh
      - name: Run TCP tests
        run: |
          echo "=== Running TCP Integration Tests ==="
          bash k8s-tests/test-tcp.sh
      - name: Run broadcast tests
        run: |
          echo "=== Running Broadcast Integration Tests ==="
          bash k8s-tests/test-broadcast.sh
      - name: Run comprehensive monitoring tests
        env:
          BUILD_CONTAINERS: "true"
        run: |
          echo "=== Running Comprehensive Monitoring Tests ==="
          bash scripts/test_comprehensive_monitoring.sh
      - name: Upload all integration logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cluster-integration-logs
          path: k8s-tests/logs
      - name: Destroy cluster
        if: always()
        run: scripts/manage_ci_cluster.sh destroy

  # Run end-to-end tests against local services (no cluster needed)
  e2e:
    needs: [build, prepare-ci-image]
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    container:
      image: ${{ needs.prepare-ci-image.outputs.ci-image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install system packages (fallback only)
        if: needs.prepare-ci-image.outputs.ci-image == env.CI_FALLBACK_IMAGE
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "Using fallback image, installing basic packages..."
          apt-get update && apt-get install -y --no-install-recommends curl jq
      - name: Install Node dependencies
        run: |
          cd backend && npm install && cd ..
          cd frontend && npm install && npm run build && cd ..
      - name: Start services
        run: scripts/start_test_services.sh
      - name: Run websocket tests
        run: bash k8s-tests/test-websocket.sh
      - name: Stop services
        if: always()
        run: scripts/stop_test_services.sh
      - name: Upload e2e logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-logs
          path: k8s-tests/logs

  # Deploy services in Minikube and run live end-to-end tests
  e2e-live:
    needs: [build, cluster-integration, prepare-ci-image]  # Run after cluster integration tests complete
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    container:
      image: ${{ needs.prepare-ci-image.outputs.ci-image }}
      options: --privileged
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install system packages (fallback only)
        if: needs.prepare-ci-image.outputs.ci-image == env.CI_FALLBACK_IMAGE
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "Using fallback image, installing required packages..."
          apt-get update
          apt-get install -y --no-install-recommends \
            qemu-system-x86 qemu-kvm wine gstreamer1.0-tools \
            pulseaudio docker.io tcpdump netcat-openbsd curl jq \
            ca-certificates apt-transport-https lsb-release gnupg conntrack
      - name: Install kubectl and helm (fallback only)
        if: needs.prepare-ci-image.outputs.ci-image == env.CI_FALLBACK_IMAGE
        run: |
          curl -LO "https://dl.k8s.io/release/v1.28.3/bin/linux/amd64/kubectl"
          install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          curl https://get.helm.sh/helm-v3.15.4-linux-amd64.tar.gz | tar -xzO linux-amd64/helm > /usr/local/bin/helm
          chmod +x /usr/local/bin/helm
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          install -o root -g root -m 0755 minikube /usr/local/bin/minikube
      - name: Verify pre-installed tools
        run: |
          echo "Verifying CI tools..."
          kubectl version --client=true
          helm version --short
          minikube version --short
          docker --version
          echo "All tools verified successfully"
      - name: Start Docker daemon
        run: scripts/start_docker_daemon.sh
      - name: Install Node dependencies
        run: |
          cd backend && npm install && cd ..
          cd frontend && npm install && npm run build && cd ..
      - name: Create Minikube cluster
        run: scripts/manage_ci_cluster.sh create
      - name: Start forwards
        run: scripts/start_live_cluster.sh
      - name: Run websocket tests against cluster
        env:
          STREAM_CONFIG: /tmp/live_instances.json
        run: bash k8s-tests/test-websocket.sh
      - name: Stop cluster forwards
        if: always()
        run: scripts/stop_live_cluster.sh
      - name: Upload live e2e logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: live-e2e-logs
          path: k8s-tests/logs
      - name: Destroy cluster
        if: always()
        run: scripts/manage_ci_cluster.sh destroy

